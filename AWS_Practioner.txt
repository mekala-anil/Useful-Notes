
Types of Cloud Computing:

	Infrastructure as a Service(IaaS): Complete Virtual Machine (A OS machine in cloud)

	Platform as a Service(PaaS) : Directly Deploy without worrying about underlying software

	Softaware as a Service(SaaS) : complete software runs and managed by AWS


- AWS as pay as as you go pricing model, which has majorly 3 categories

1. Compute: Pay for compute time

2. Storage: Pay for data stored

3. Networking: Pay for OUT transferred data, Data transfer IN is free


IAM: Users & Groups
--------------------

IAM: Identity and Access Management

-It is a Global Service

-Root account created by default, it can't be used or shared

-Users and Groups can be created

-Groups only contain Users, not groups

-User can be alone or User can belong to multiple groups


IAM:Permissions:
----------------

-Users or Groups are assigned by JSON Documents which are Policies

-Theses policies define users to use resources

-In AWS we will give least privilages to users or groups, not more than needed



To Access AWS:
--------------

To access AWS we have 3 options

1. AWS Management Console : Protected by Password + MFA

2. AWS Command Line Interface(CLI): Protected by access keys

3. AWS Software Development Kits(SDK): for code:protected by access keys

-Access Keys are generated throw AWS Console


AWS CLI:
---------

A tool that enables you to interact with AWS Services using commands in your command line shell

-Direct Access to Public APIs of AWS services

-You can develop scripts to manage your resources

-Alternative to use AWS Management Console


AWS SDK
-------

AWSSoftware Development Kit(AWS SDK)

-Language specific APIs(set of libraries)

-Enables you to manage and access aws services programatically

-Embedded within your application

-Supports many programming languages

-AWS CLI built on AWS SDK for Python


IAM Roles for Services
-----------------------

-Some AWS Services will need to perform actions on your behalf

-To do so, we will assign permissions to AWS services with IAM Roles

-Common Roles

	EC2 Instance Roles

	Lamda Function Roles

	Roles for CloudFormation



IAM Security Tools:
-------------------

IAM Credentials Report(acoount-level)

	-A Report that lists all your account users and status of their various credentials

IAM Access Advisor(user-level)

	-Shows service permissions granted to a user and when those services last accessed



Amazon EC2(Elastic Cloud Compute)
----------------------------------

-EC2 is one of the most papulor AWS offering

-It is Inftrastructure as a Service (IaaS)

-Main Capabilities are

	-Renting Virtual Machines(EC2)

	-Storing data on Virtual Drives(EBS)

	-Distributing load across machines(ELB)

	-Scaling services using Auto Scaling Groups(ASG)

-Knowing EC2 is fundamental to know how cloud works


EC2 Configuration Options:
--------------------------

-Operating Systems(OS): Windows, Linux, Mac OS

-How much compute power and cores(CPU)

-How much random access memory(RAM)

-How much storage space

	-Network Attached(EBS & EFS)

	-Hardware(EC2 Instance Store)

-Network card: Speed of card, Public IP Address

-Firewall Rules: Security Groups

-Bootstrap script(At first launch): User Data

-We have Several Instance types to choose based on requirements


Security Groups:
----------------

-Security Groups are fundamentals of network security in AWS

-They controll how traffic allowed INTO or OUT of EC2 Instances

-Security Groups only contain Allow rules

-Security group rules can reference by IP or by Security groups

-They regulate access to ports

-They regulate authorized IP ranges- IPv4 and IPv6

-Security group can be attached to multiple instances and vice versa

-By default, all inbound traffic blocked and outbound traffic autherized


Classic Ports to Know:
----------------------

22=SSH(Secure Shell)-log in into linux instance

21=FTP(File Transfer Protocal)-upload files into file share

22=SFTP(Secure File transfer Protocal)-upload files using SSH

80=HTTP-access unsecured websites

443=HTTPS-access secured websites

3389=RDP(Remote Desktop Protocal)-log into a windows instance


EBS Volume:
------------

-An EBS(Elastic Block Store) volume is a network drive you can attach to your EC2 Instance while they run

-It allows your instance to persist data even after their termination

-They are bound to a specific availability zone

-Anology: Think them as : 'network USB stick'

- Its a network drive (i.e not physical), uses network to communicate thus we can see some latency

-Have a provisioned capacity(size in GB and IOPS)

-We can backup(snapshot) of EBS Volume any time then we can restore it later


EC2 Instance Store:
-------------------

-EBS are good but because of network driven their perfamance bit slow

-For High Performance Hardware Disk, Use EC2 Instance Store

-Better I/O Performance

-Risk of data loss if hardware fails

-Good for buffer/cache/scrach data/temporary content

-EC2 Instance store lose their storage if they stopped


EFS-Elastic File System:
-----------------------

-Manged EFS(Network file system) can be mounted on 100s of EC2

-EFS works with Linux EC2 Instances in multi-AZ

-Highly available, scalable,expensive(3 x gp2), pay per use, no capacity planning

- EFS-IA(EFS Infrequent Access)
	
	-Storage class that is cost optamized for files that are not used everyday

	-Upto 92% lower cost compared to EFS

	-EFS automatically moves files to EFS-IA based on last time they were used

AMI Overview:
-------------

-AMI : Amazon Machine Image

-AMI are a cutomization of EC2 Instance, we can build our own configurations

-AMI arebuilt for specific region(also can copied to across regions)

-You can launch EC2 Instances from

	-A public AMI: AWS Provided

	-Your own AMI: you can make your own and maintain yourself

	-An AWS AMI Marketplace: An AMI someone else made

-EC2 Image Builder: Automatcally build, test and distribute AMIs



Elasting LoadBalancing & Auto Scaling Groups:
----------------------------------------------

Vertical Scalability:
--------------------

-Increasing the size or capacity of Instance

-If Intance running in t2.micro, vertical scaling means upgrading to t2.large

-Vertical scalability is common for non distributed systems ex. databses


Horizantal Scalability:
------------------------

-Increasing number of instances

-Horizantal scaling implies on distrubted systems

-It is very common for modern web applications

-It is easy to do horizantal scaling, Thanks to Amazon EC2	

High Availability:
-----------------

-Running Instance at least 2 Availability Zones

-Goal of High availability is to survive data loss(disaster)


Scalability Vs Elasticity:
-------------------------

Scalability: It is ability to accomidate large load by making hardware stronger by scaling up or out

Elasticity: Elasticity means there is a Auto Scaling Groups which can Scale system based on load if System is scalable


Load Balancing:
---------------

-Load balancers are servers that forward internet traffic to multiple servers(EC2 Instances) downstream

-Spread load across multiple downstream instances

-Expose single point of access(DNS) to your application

-Seamlessly handle failures of downstream instances

-Do regular health checks to your indtances

-Provide SSL termination(HTTPS) for your websites

-High availability across Zones


Why Elastic Load Balancer:
--------------------------

-An ELB(Elastic Load Balancer) is a managed load balancer

-AWS takes care of upgrades,maintanence, high availability

-4 kinds of load balancers offered by AWS

	1. Application Load Balancer(HTTP/HTTPS only)- Layer 7

	2. Network Load Balancer (ultra-high performance, allows for TCP) - Layer 4

	3. Gateway Load Balancer - Layer 3

	4. Classic Load Balancer (retired in 2023) - Layer 4&7


Auto Scaling Group(ASG):
------------------------

-In real life, websites traffic can be changed quickly

-Goal of Auto Scaling Group is

	1. Scale out(add EC2 Instances) to match an increased load

	2. scale in(remove EC2 Instances) to match decreased load

	3. Ensure we have minimum and maximum number of machines running

	4. Automatically register new instances to a load balancer

	5. Replaces unhealthy instances

-Cost Savings: Only run at an optimal capacity(principle of cloud) 

-Need to integrate load balancers to ASG for sealess distribution of traffic


Amazon S3:
--------

S3 (Simple Storage Service) is a Cloud storage service provided by AWs

-It allows to store and retrive any amount of data from anywhere on web

-S3 service allows you to create buckets in which you can store anything

-We dont have any restrics data amount can store in s3 bucket

We have 5 major Advantages

-Availability and Durability

-Scalability

-Security

-Cost Effective

-Performance

- We have various S3 Storage classes which will have unique characteristics

- S3 will maintain versioning of objects as well

- We can also host static websites in S3 Buckets


AWS CloudWatch:
---------------

-AWS CloudWatch is a comprehensive monitoring service for across AWS Resources and Applications that run on AWS

-It enables real time montoring of Applications on AWS

Key Features of CloudWatch:


AWS Lamda:
-----------

Serverless Architecture: Serverless Architecture is a cloud computing model which will be executed based on Events,

Infrastructure managed dynamically

AWS Lamda: AWS Lamda is key service of AWS which provides Serverless Architecture, AWS Lamdas will execute based on

predefined events like HTTP Requests via API Gateway, file uploads in S3, CloudWatch alerts etc.

Key Specifications of Lamda:
---------------------------

-Auto Scaling: Dynamically Auto Scales based on traffic

-Event-Driven: It responds to various AWS services like S3, DynamoDB, SNS etc.

-Execution Time Limit: Lamda functions will run for maximum of 15 minutes per execution

-Cost Efficiency: You only pay for execution time and no of invocations

-Cold Start: Lamda has cold start issue where it takes soeme time to initialize when it is idle for long time

Sample Use Cases of AWS Lamda:
------------------------------

-REST API Backend: Combine AWS API Gateway with Lamdas to create Scalable REST APIs

-Cron Jobs and Task Sheduling: Shedule and execute tasks for predefined intervals without maintaning servers

-Microservices: Break down your monolithic application into smaller independent lamda functions

-Simplified CI/CD: Integrating with tools like GitLab making continious deployemet process makes easy

-Challenges:

	-Cold Start: Since Java Application or Spring Applications tends to initialize slowly cold start latency can be issue in Lamdas

	-Memory Limit: Although Lamda supports upto 10GB of memory, Spring Boot Applications consume more memory, we need to monitor and optimize accordingly


AWS API Gateway:
---------------
-It serves as the entry point for APIs that interact with AWS services like Lambda, EC2, and RDS, or other backend systems

-API Gateway helps to expose backend applications such as microservices to the external world in a secure and scalable way.

Key Features of API Gateway:
----------------------------
-RestFull and WebSocket APIs: It creates both RESTfull and Web Socket APIs for two way communication

-Scalability: API Gateway automatically scales to handle hundreds of thousands of concurrent API calls.

-Caching: API Gateway provides the ability to cache responses, reducing the load on the backend and improving performance.

-Custom Domain Names: You can map a custom domain name to your API Gateway to give users a consistent URL.

-Support for Multiple Backends: API Gateway can integrate with multiple types of backends including AWS Lambda, HTTP endpoints, Amazon EC2, and more

